#!/usr/bin/env php
<?php
require_once __DIR__ . '/../bootstrap/autoload.php';

use Phinx\Config\Config as PhinxConfig;
use Phinx\Console\PhinxApplication;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleCommandEvent;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\EventDispatcher\EventDispatcher;


$root = __DIR__;
$dispatcher = new EventDispatcher();
$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) use ($root) {
    $config = "";
    $command = $event->getCommand();
    // dd($command);
    (new Dotenv\Dotenv(__DIR__.'/../'))->load();

    if ($command instanceof Phinx\Console\Command\AbstractCommand) {
        $input       = $event->getInput();
        $output      = $event->getOutput();
        $environment = 'development';
        $module      = 'core';

        if ($input->hasOption('environment')) {
            if (null !== $input->getOption('environment')) {
                $environment = $input->getOption('environment');
            } else {
                $input->setOption('environment', $environment);
            }
        }

        if (file_exists("{$root}/config/phinx/config-{$environment}.php")) {
            $config = require "{$root}/config/phinx/config-{$environment}.php";
        }

        if (empty($config)) {
            $output->writeln(sprintf('<error>Unknown environment "%s" | Check your config folder if the file exists</error>', $environment, $environment));
            exit;
        }

        $database = json_decode(json_encode($config['environments'][$config['environments']['default_database']]));

        $root = dirname(__DIR__);

        switch (get_class($command)) {
            case 'Phinx\Console\Command\Create':
            case 'Phinx\Console\Command\SeedCreate':
                $question = new ChoiceQuestion(
                    'Which module do you want to save this migration?',
                    ['core', 'Quest', 'Frontier']
                );
                $module = $command->getHelper('question')->ask($input, $output, $question);
                $migrations = $root."/*/$module/database/migrations";
                $seeds      = $root."/*/$module/database/seeds";
                break;
            default:
                $migrations = [$root.'/database/migrations', $root.'/*/*/database/migrations'];
                $seeds      = [$root.'/database/seeds', $root.'/*/*/database/seeds'];
        }

        $config = new PhinxConfig([
                'environments' => [
                    'default_migration_table' => 'phinxlog',
                    'default_database'        => $environment,
                    $environment              => [
                        'adapter'  => 'mysql',
                        'host'     => $database->host,
                        'name'     => $database->name,
                        'user'     => $database->user,
                        'pass'     => $database->pass,
                        'port'     => isset($database->port) ? $database->port : 3306,
                        'charset'  => isset($database->charset) ? $database->charset : 'utf8',
                    ]
                ],
                'paths' => [
                    'migrations' => $migrations,
                    'seeds'      => $seeds
                ],
                'templates' => [
                    'file' => __DIR__.'/templates/migrations/updown-migration.stub'
                ],
            ]);

        $command->setConfig($config);
    }
});

$phinx = new Phinx\Console\PhinxApplication();
$phinx->setDispatcher($dispatcher);
$phinx->run();
